#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/routing-api
LOG_DIR=/var/vcap/sys/log/routing-api
PIDFILE=$RUN_DIR/routing-api.pid

source /var/vcap/packages/routing_utils/pid_utils.sh
source /var/vcap/packages/routing_utils/syslog_utils.sh

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  my_ip = discover_external_ip
%>

case $1 in

  start)
    pid_guard $PIDFILE "routing-api"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown -R vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    tee_output_to_sys_log "${LOG_DIR}"

    set +e
    host <%= p("dns_health_check_host") %>
    if [[ "0" != "$?" ]]; then
      echo "DNS is not up"
      exit 1
    fi
    set -e

    echo $$ > $PIDFILE

    # Allowed number of open file descriptors
    # ulimit -n 100000

    routing_port=3000
    exec chpst -u vcap:vcap /var/vcap/packages/routing-api/bin/routing-api \
         -config /var/vcap/jobs/routing-api/config/routing-api.yml \
         -port $routing_port \
         -logLevel=<%= p("routing_api.log_level") %> \
         -maxTTL <%= p("routing_api.max_ttl") %> \
         -ip <%= my_ip %> \
         -systemDomain <%= p("routing_api.system_domain") %> <% if p("routing_api.auth_disabled") == true %> -devMode <% end %> \
         <%= p("routing_api.etcd.servers").map{|addr| "#{p("routing_api.etcd.require_ssl") ? "https" : "http"}://#{addr}:4001"}.join(" ")%>

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: routing-api_ctl {start|stop}"

    ;;

esac
